#!/bin/sh

. scripts/configure.sh || exit 1

check_cflags()
{
	check_cc_flag -std=gnu99 -pipe -Wall -Wshadow -Wcast-align -Wpointer-arith \
		-Wwrite-strings -Wundef -Wmissing-prototypes -Wredundant-decls \
		-Wextra -Wno-sign-compare -Wformat-security

	for i in -Wdeclaration-after-statement \
		-Wold-style-definition \
		-Wno-pointer-sign \
		-Werror-implicit-function-declaration \
		-Wno-unused-parameter
	do
		check_cc_flag $i
	done
	return 0
}

check_compat()
{
	COMPAT_LIBS=
	case `uname -s` in
	SunOS)
		# connect() etc.
		try_link -lsocket && COMPAT_LIBS="$COMPAT_LIBS -lsocket"

		# gethostbyname()
		try_link -lnsl && COMPAT_LIBS="$COMPAT_LIBS -lnsl"

		# nanosleep()
		if try_link -lrt
		then
			COMPAT_LIBS="$COMPAT_LIBS -lrt"
		elif try_link -lposix4
		then
			COMPAT_LIBS="$COMPAT_LIBS -lposix4"
		fi
		;;
	MINGW*)
		COMPAT_LIBS="$COMPAT_LIBS -lws2_32 -Wl,--enable-stdcall-fixup -Wl,--export-all-symbols"
		FLAC_LIBS="$FLAC_LIBS -lws2_32"
		STANDALONE_PLUGINS=y
		makefile_vars STANDALONE_PLUGINS
	esac
	makefile_vars COMPAT_LIBS
}

check_binext()
{
	LIB_EXT=".so"
	case `uname -s` in
	MINGW*)
		LIB_EXT=".dll"
		;;
	esac
	makefile_vars LIB_EXT
	config_header config/plugin.h LIB_EXT
}

rtsched_code="
#include <pthread.h>

int main(int argc, char *argv[])
{
	pthread_attr_t attr;
	struct sched_param param;

	pthread_attr_init(&attr);
	pthread_attr_setschedpolicy(&attr, SCHED_RR);
	param.sched_priority = sched_get_priority_max(SCHED_RR);
	pthread_attr_setschedparam(&attr, &param);
	return 0;
}
"

check_rtsched()
{
	msg_checking "for realtime scheduling"
	if try_compile_link "$rtsched_code" $PTHREAD_CFLAGS $PTHREAD_LIBS
	then
		msg_result yes
		EXTRA_CFLAGS="$EXTRA_CFLAGS -DREALTIME_SCHEDULING"
	else
		msg_result no
	fi
	return 0
}

ncurses_code="
#if defined(__sun__) || defined(__CYGWIN__)
#include <termios.h>
#include <ncurses.h>
#else
#include <curses.h>
#endif

int main(void)
{
	initscr();
	endwin();
	return 0;
}
"

check_mpc()
{
	MPC_SV8=0
	if check_header mpc/mpcdec.h
	then
		MPC_SV8=1
	else
		check_header mpcdec/mpcdec.h || return $?
	fi
	check_library MPC "" "-lmpcdec -lm"
	return $?
}

check_flac()
{
	if pkg_config FLAC "flac" "" "-lFLAC -lm"
	then
		# Make sure the FLAC_CFLAGS value is sane, strip trailing '/FLAC'.
		FLAC_CFLAGS=`echo $FLAC_CFLAGS | sed "s/FLAC$//"`
		return 0
	fi
	check_library FLAC "" "-lFLAC -lvorbisfile -lm"
	return $?
}

check_mad()
{
	pkg_config MAD "mad" "" "-lmad -lm"
	return $?
}

mikmod_code="
#include <mikmod.h>
int main() {
	MikMod_RegisterAllDrivers();
	return 0;
}
"
check_mikmod()
{
	# mikmod is linked against pthread
	app_config MIKMOD libmikmod-config || \
		check_library MIKMOD "$PTHREAD_CFLAGS" "-lmikmod $PTHREAD_LIBS" || \
		return 1
	try_compile_link "$mikmod_code" $MIKMOD_CFLAGS $MIKMOD_LIBS
	return $?
}

check_modplug()
{
	pkg_config MODPLUG "libmodplug" "-I/usr/include/libmodplug" "-lmodplug -lstdc++ -lm"
	return $?
}

check_vorbis()
{
	if test "$CONFIG_TREMOR" = y
	then
		pkg_config VORBIS "vorbisidec" "" "-lvorbisidec -lm"
		return $?
	else
		pkg_config VORBIS "vorbisfile" "" "-lvorbisfile -lvorbis -lm -logg"
		return $?
	fi
}

check_wavpack()
{
	pkg_config WAVPACK "wavpack" "" "-lwavpack"
	return $?
}

check_pulse()
{
	pkg_config PULSE "libpulse >= 0.9.19"
	return $?
}

check_alsa()
{
	# the alsa.pc file should be always available
	pkg_config ALSA "alsa >= 1.0.11"
	return $?
}

check_ao()
{
	pkg_config AO "ao" "" "-lao"
	return $?
}

arts_code="
#include <artsc.h>
int main() {
	return arts_init();
}
"
check_arts()
{
	app_config ARTS artsc-config || return 1
	try_compile_link "$arts_code" $ARTS_CFLAGS $ARTS_LIBS
	return $?
}

check_oss()
{
	case `uname -s` in
		Linux|*FreeBSD)
			;;
		*BSD)
			check_library OSS "" "-lossaudio"
			return $?
			;;
		*)
			# unknown
			;;
	esac

	OSS_CFLAGS=""
	OSS_LIBS=""
	msg_checking "for header <sys/soundcard.h>"
	if test -f /usr/include/sys/soundcard.h
	then
		msg_result "yes"
		makefile_vars OSS_CFLAGS OSS_LIBS
		return 0
	else
		msg_result "no"
	fi
	return 1
}

check_sun()
{
	msg_checking "for header <sys/audioio.h>"
	if test -f /usr/include/sys/audioio.h
	then
		msg_result "yes"
		return 0
	else
		msg_result "no"
		return 1
	fi
}

check_waveout()
{
	case `uname -s` in
	MINGW*)
		check_library WAVEOUT "" "-lwinmm"
		return $?
	esac
	return 1
}

check_roar()
{
	pkg_config ROAR "libroar >= 0.4.5"
	return $?
}

check_mp4()
{
	USE_MPEG4IP=1
	if check_header mp4v2/mp4v2.h
	then
		USE_MPEG4IP=0
	else
		check_header mp4.h || return $?
	fi
	check_header neaacdec.h &&
	check_library MP4 "" "-lmp4v2 -lfaad -lm"
	return $?
}

check_aac()
{
	check_header neaacdec.h &&
	check_library AAC "" "-lfaad -lm"
	return $?
}

check_ffmpeg()
{
	HAVE_FFMPEG_AVCODEC_H=y
	pkg_config FFMPEG "libavformat" || return $?
	if check_header "libavcodec/avcodec.h" $FFMPEG_CFLAGS
	then
		HAVE_FFMPEG_AVCODEC_H=n
	else
		check_header "ffmpeg/avcodec.h" $FFMPEG_CFLAGS || return $?
	fi
	return 0
}

# defaults
prefix=/usr/local
DEBUG=1
CONFIG_TREMOR=n
CONFIG_MIKMOD=n
USE_FALLBACK_IP=n
HAVE_BYTESWAP_H=n
# unset CONFIG_* variables: if check succeeds 'y', otherwise 'n'

USAGE="
Options:
  prefix          Installation prefix    [$prefix]
  bindir          User executables       [\$prefix/bin]
  datadir         Read-only data         [\$prefix/share]
  libdir          Libraries              [\$prefix/lib]
  mandir          Man pages              [\$datadir/man]
  exampledir      Examples               [\$datadir/doc/cmus/examples]
  DEBUG           Debugging level (0-2)  [$DEBUG]

Optional Features: y/n
  CONFIG_FLAC     	Free Lossless Audio Codec (.flac, .fla)         [auto]
  CONFIG_MAD      	MPEG Audio Decoder (.mp3, .mp2, streams)        [auto]
  CONFIG_MODPLUG  	libmodplug (.mod, .x3m, ...)                    [auto]
  CONFIG_MIKMOD   	libmikmod (.mod, .x3m, ...)                     [n]
  CONFIG_MPC      	libmpcdec (Musepack .mpc, .mpp, .mp+)           [auto]
  CONFIG_VORBIS   	Ogg/Vorbis (.ogg, application/ogg, audio/x-ogg) [auto]
  CONFIG_TREMOR   	Use Tremor as Ogg/Vorbis input plugin           [n]
  CONFIG_WAV      	WAV                                             [y]
  CONFIG_WAVPACK  	WavPack (.wv, audio/x-wavpack)                  [auto]
  CONFIG_MP4      	MPEG-4 AAC (.mp4, .m4a, .m4b)                   [auto]
  CONFIG_AAC      	AAC (.aac, audio/aac, audio/aacp)               [auto]
  CONFIG_FFMPEG   	FFMPEG (.shn, .wma)                             [auto]
  CONFIG_ROAR           native RoarAudio output                         [auto]
  CONFIG_PULSE    	native PulseAudio output                        [auto]
  CONFIG_ALSA     	ALSA                                            [auto]
  CONFIG_AO       	Libao cross-platform audio library              [auto]
  CONFIG_ARTS     	ARTS                                            [auto]
  CONFIG_OSS      	Open Sound System                               [auto]
  CONFIG_SUN      	Sun Audio                                       [auto]
  CONFIG_WAVEOUT  	Windows Wave Out                                [auto]
  USE_FALLBACK_IP	Use a specific IP for every unrecognized	[n]
                        input format. Currently set to FFMPEG.

Also many standard variables like CC, LD, CFLAGS, LDFLAGS are recognized.
Cross compiling is supported via CROSS=target-prefix-
    optionally set HOSTCC=this-machine-gcc, HOSTLD, HOST_CFLAGS, HOST_LDFLAGS."

parse_command_line "$@"

case $DEBUG in
[0-2])
	;;
*)
	die "DEBUG must be 0-2"
	;;
esac

var_default bindir "${prefix}/bin"
var_default datadir "${prefix}/share"
var_default libdir "${prefix}/lib"
var_default mandir "${datadir}/man"
var_default exampledir "${datadir}/doc/cmus/examples"

check check_cc
check check_host_cc
check check_cflags
check check_cc_depgen
check check_endianness
check check_dl
check check_pthread
check check_rtsched
check check_iconv
check_header byteswap.h && HAVE_BYTESWAP_H=y

check check_flac    CONFIG_FLAC
check check_mad     CONFIG_MAD
check check_mikmod  CONFIG_MIKMOD
check check_modplug CONFIG_MODPLUG
check check_mpc     CONFIG_MPC
check check_vorbis  CONFIG_VORBIS
check check_wavpack CONFIG_WAVPACK
check check_mp4     CONFIG_MP4
check check_aac     CONFIG_AAC
check check_ffmpeg  CONFIG_FFMPEG
# nothing to check, just validate the variable values
check true          CONFIG_TREMOR
check true          CONFIG_WAV
check check_pulse   CONFIG_PULSE
check check_alsa    CONFIG_ALSA
check check_ao      CONFIG_AO
check check_arts    CONFIG_ARTS
check check_oss     CONFIG_OSS
check check_sun     CONFIG_SUN
check check_waveout CONFIG_WAVEOUT
check check_roar    CONFIG_ROAR

check check_compat
check check_binext

test "$WORDS_BIGENDIAN" = y && CFLAGS="${CFLAGS} -DWORDS_BIGENDIAN"

DATADIR="$datadir"
LIBDIR="$libdir"

config_header config/datadir.h DATADIR
config_header config/libdir.h LIBDIR
config_header config/debug.h DEBUG
config_header config/tremor.h CONFIG_TREMOR
config_header config/mpc.h MPC_SV8
config_header config/mp4.h USE_MPEG4IP
config_header config/ffmpeg.h HAVE_FFMPEG_AVCODEC_H USE_FALLBACK_IP
config_header config/utils.h HAVE_BYTESWAP_H
config_header config/iconv.h HAVE_ICONV

makefile_vars bindir datadir libdir mandir exampledir
makefile_vars CONFIG_FLAC CONFIG_MAD CONFIG_MIKMOD CONFIG_MODPLUG CONFIG_MPC CONFIG_VORBIS CONFIG_WAVPACK CONFIG_WAV CONFIG_MP4 CONFIG_AAC CONFIG_FFMPEG
makefile_vars CONFIG_ROAR CONFIG_PULSE CONFIG_ALSA CONFIG_AO CONFIG_ARTS CONFIG_OSS CONFIG_SUN CONFIG_WAVEOUT

generate_config_mk
